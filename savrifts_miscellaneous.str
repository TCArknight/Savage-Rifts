<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components that don't really fit anywhere
      else, such as resources, journal entries, etc.
-->

<document signature="Hero Lab Structure">

    <!-- Arcane component
        Encapsulates management of arcane backgrounds (e.g. Magic, Psionics, etc.).
        Arcane backgrounds track the initial number of powers and power points
        conferred. They also bootstrap the appropriate arcane skill.
  -->
  <component
    id="Arcane2"
    name="Secondary Arcane Background"
    autocompset="no">

    <!-- Number of powers -->
    <field
      id="arcPowers2"
      name="Number of Powers"
      type="static">
      </field>

    <!-- Number of power points -->
    <field
      id="arcPoints2"
      name="Number of Power Points"
      type="static">
      </field>

    <!-- Forward the type of arcane background to the actor -->
    <!-- RDS The Super Powers Companion Arcane Background works a little differently and does not use the HasArcBack tag -->
    <eval index="1" phase="Initialize" priority="2100"><![CDATA[
      if (tagis[Arcane.SPCGroup] = 0) then
        perform hero.assign[Rifts.HasSecondaryAB]
		perform hero.assign[Rifts.UsesSecondaryPP]
        endif
      perform forward[Arcane.?]
      ~RDS SWD This allows Powers to be associated to Arcane Backgrounds from either end
      perform forward[PowerDeny.?]
      ]]></eval>

    <!-- Add the arcane powers and points appropriately -->
    <eval index="2" phase="Setup" priority="5000" name="Set Secondary Arcane Power Points"><![CDATA[
      #resmax[resPowers2] += field[arcPowers2].value
      #trkmax[trkPower2] += field[arcPoints2].value
      ]]></eval>

    <!-- If this is not Weird Science, make the Power Points tracker visible -->
    <eval index="3" phase="Render" priority="5000"><![CDATA[
      if (tagis[Arcane.WeirdSci] = 0) then
        perform hero.child[trkPower2].delete[Hide.Tracker]
        endif
      ]]></eval>

    </component>

  <component
    id="Fortune"
    name="Fortune and Glory"
	autocompset="no">

    <!-- Each fortune must consume an instance in the resource tracking edges -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      ~if this fortune is not added directly to the hero (i.e. an advance), skip it entirely
      doneif (origin.ishero = 0)

      ~if this edge was not added by the user, skip it entirely
      doneif (isuser = 0)

      ~if this edge was added by the cyberware or robotics, skip it entirely
      doneif (tagis[Helper.ModNoEdge] + tagis[Helper.ModSeEdge] + tagis[Helper.ModVeEdge] + tagis[Helper.ModHeEdge] + tagis[Helper.ModLeEdge] <> 0)

      ~if this Edge is set up as Free, do not count it
      doneif (tagis[Helper.FreeEdge] <> 0)

      ~consume additional edge slots
      perform #resspent[resFortune,+,1,field[name].text]
      ]]></eval>
    </component>

  <!-- Base component for Hero's Journey entries -->
  <component
    id="HeroJrny"
    name="Hero's Journey"
	autocompset="no">
	  
    <field
      id="hjAddTxt"
      name="Hero's Journey Add Text"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="hjHdrTxt"
      name="Hero's Journey Header Text"
      type="derived"
	  maxlength="500">
	  </field>

    <field
      id="hjExpr"
      name="Hero's Journey Expression"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <!-- Each Frame Complication needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="RiftsHJ"/>
	
	<!-- Forward the Heros Journey category to the actor -->
    <eval index="1" phase="Initialize" priority="2100"><![CDATA[
      perform forward[RiftsHJ.?]
      ]]></eval>
	  
    <!-- Each hero journey selection must consume an instance in the resource tracking edges -->
    <eval index="2" phase="Setup" priority="5000"><![CDATA[
      ~if this fortune is not added directly to the hero (i.e. an advance), skip it entirely
      doneif (origin.ishero = 0)

      ~if this edge was not added by the user, skip it entirely
      doneif (isuser = 0)

      ~if this edge was added by the cyberware or robotics, skip it entirely
      doneif (tagis[Helper.ModNoEdge] + tagis[Helper.ModSeEdge] + tagis[Helper.ModVeEdge] + tagis[Helper.ModHeEdge] + tagis[Helper.ModLeEdge] <> 0)

      ~consume additional edge slots
      perform #resspent[resHeroJrn,+,1,field[name].text]
      ]]></eval>
    </component>

	<!-- Transact - all transactions utilize this compset -->
  <!-- Arcane2 - all secondary arcane backgrounds utilize this compset -->
  <compset
    id="Arcane2">
    <compref component="Arcane2"/>
    </compset>
  <compset
    id="Fortune">
    <compref component="Fortune"/>
	<compref component="Domain"/>
	<compref component="UserSelect"/>
    </compset>
  <compset
    id="HeroJrny">
    <compref component="HeroJrny"/>
	<compref component="Ability"/>
	<compref component="Domain"/>
	<compref component="UserSelect"/>
    </compset>
  </document>
