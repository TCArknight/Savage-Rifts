<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of a traditional "statblock" output for the
      game system. The statblock is defined as a dossier and then uses an assortment
      of procedures to orchestrate the synthesis of the output.
-->

<document signature="Hero Lab Data">

  <!-- Procedure sbherojrny
        Output all of the hero journey entries that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sbherojrny" scripttype="synthesize"><![CDATA[
    var tagexpr as string
    var ismore as number
    ismore = 0
    foreach pick in hero where tagexpr
      append " " & chr(149) & " " & eachpick.field[name].text & ": " & eachpick.field[summary].text & @newline
      ismore = 1
      nexteach
    append @newline
    ]]></procedure>
	
  <!-- Procedure sbherojrnylist
        Output all of the hero journey entries that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sbherojrnylist" scripttype="synthesize"><![CDATA[
    var liston as string
	var listitem as string
	var listoff as string
	
	liston = "[list]"
	listitem = "[*]"
    listoff = "[/list]"
	
    var tagexpr as string

	append liston& @newline
    foreach pick in hero where tagexpr
	  append listitem & @boldon & eachpick.tagnames[RiftsHJTable.?,","] & @boldoff & @newline
      append liston & @newline 
	  append listitem & eachpick.field[name].text & ": " & eachpick.field[summary].text & @newline
	  append listoff & @newline
      nexteach
    append listoff & @newline
	
    ]]></procedure>
	
  <procedure id="sbfortune" scripttype="synthesize"><![CDATA[
    var tagexpr as string
    var ismore as number
    ismore = 0
    foreach pick in hero where tagexpr
      append " " & chr(149) & " " & eachpick.field[name].text & ": " & eachpick.field[summary].text & @newline
      ismore = 1
      nexteach
    append @newline
    ]]></procedure>
	
  <procedure id="sbfortunelist" scripttype="synthesize"><![CDATA[
    var liston as string
	var listitem as string
	var listoff as string
	
	liston = "[list]"
	listitem = "[*]"
    listoff = "[/list]"
	
    var tagexpr as string

	append liston & @newline
    foreach pick in hero where tagexpr
      append listitem & @boldon & eachpick.field[name].text & @boldoff & @newline
	  append liston & @newline 
	  append listitem & eachpick.field[summary].text & @newline
      append listoff & @newline
      nexteach
    append listoff & @newline
	
    ]]></procedure>
	
  <procedure id="sbcyber" scripttype="synthesize"><![CDATA[
    var tagexpr as string
    var ismore as number
    ismore = 0
    foreach pick in hero where tagexpr
      append " " & chr(149) & " " & eachpick.field[grStkName].text & ": " & eachpick.field[summary].text & @newline
      ismore = 1
      nexteach
    append @newline
    ]]></procedure>
	
  <procedure id="sblistcyber" scripttype="synthesize"><![CDATA[
    var liston as string
	var listitem as string
	var listoff as string
    var tagexpr as string
    
    append liston & @newline
    foreach pick in hero where tagexpr
      append @boldon & eachpick.field[grStkName].text & " (" & @boldoff
	  append "x" & eachpick.field[stackQty].text & @boldon & ") " & @boldoff
	  append "- Strain: " & eachpick.field[cybStrain].text
	  append liston & @newline
	  append listitem & eachpick.field[summary].text & @newline
	  append listoff & @newline
      nexteach
	  append listoff & @newline
    ]]></procedure>
	
  <procedure id="sbSRarmor" scripttype="synthesize"><![CDATA[
    var details as string
    var ismore as number
    ismore = !empty(details)
    ~output the details of all armor
    foreach pick in hero from Defense sortas Armory
      if (eachpick.tagis[miType.?] = 0) then
        if (ismore <> 0) then
          details &= ", "
          endif
        details &= eachpick.field[name].text
        details &= " (" & signed(eachpick.field[defDefense].text)
        if (eachpick.tagis[component.Shield] <> 0) then
          if (eachpick.field[defParry].value <> 0) then
            details &= ", Parry" & signed(eachpick.field[defParry].text)
            endif
          endif
		if (eachpick.tagis[component.ArmorSpecial] <> 0) then
		   if (eachpick.field[arSpecDisp].isempty = 0) then
		     ~There is text in the grNotes field, so output it
             details &= "; " & eachpick.field[arSpecDisp].text
             endif
		   endif
		   
        details &= ")"
        ismore = 1
        endif

      nexteach
    ]]></procedure>	

  <!-- Procedure sblistskills
        Output all of the traits that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sblistskills" scripttype="synthesize"><![CDATA[
	var liston as string
	var listitem as string
	var listoff as string
	
	liston = "[list]"
	listitem = "[*]"
    listoff = "[/list]"
	
	append liston & @newline
	
    foreach pick in hero from Skill where "!Hide.Skill"
	  append listitem
      append eachpick.field[name].text & " " & eachpick.field[trtDisplay].text
      append @newline
      nexteach
	
    append listoff & @newline
	
    ]]></procedure>

  <!-- Procedure sblisttraits
        Output all of the traits that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sblisttraits" scripttype="synthesize"><![CDATA[
    var tagexpr as string
	
	var liston as string
	var listitem as string
	var listoff as string
	
	liston = "[list]"
	listitem = "[*]"
    listoff = "[/list]"
	
	append liston & @newline
	
    foreach pick in hero where tagexpr
	  append listitem
      append @boldon & eachpick.field[name].text
	  
	  ~ if eachpick is a Hindrance, indicate Major/Minor
	  if (eachpick.tagis[component.Hindrance] <> 0) then
		if (eachpick.tagis[User.HindMajor] = 0) then
			append " (Minor)"
		else 
			append " (Major)"
		endif
	  endif
	  
	  append ": " & @boldoff
	  if (length(eachpick.field[descript].text) > 100) then
        append eachpick.field[summary].text & @newline
	  else 
        append eachpick.field[descript].text & @newline
		endif
		
      nexteach
	
    append listoff & @newline
	
    ]]></procedure>
  <!-- Procedure sblisttraits
        Output all of the traits that satisfy the provided tag expression, reporting
        the name and final value for each. The "tagexpr" text variable specifies the
        constraints that must be satisfied for the list of traits.

        Inbound parameter:  tagexpr
  -->
  <procedure id="sblistarcane" scripttype="synthesize"><![CDATA[
    var tagexpr as string
	
	var liston as string
	var listitem as string
	var listoff as string
	
	liston = "[list]"
	listitem = "[*]"
    listoff = "[/list]"
	
	var myAB as string
	var myPPType as string
	var myPP as number
	var myRec as string
	var myPwrRank as string
	var mySecPPType as string
	var mySecPP as number
	var mySecRec as string
	var mySecPwrRank as string
		  
	if (hero.tagis[Rifts.UsesPPE] <> 0) then
	  myPPType = "PPE: "
	elseif (hero.tagis[Rifts.UsesISP] + hero.tagis[Edge.edgArcPsi] <> 0) then
	  myPPType = "ISP: "
	  endif
			
	myPP = hero.childfound[trkPower].field[trkMax].value
		  
	myRec = "hour"
	~ check for reduced recharge time (edgRapRch, edgRapRch2, edgSRRapRch3)
	if (hero.tagis[Edge.edgRapRch] <> 0) then
	  myRec = "30 minutes"
	elseif (hero.tagis[Edge.edgRapRch2] <> 0) then
	  myRec = "15 minutes"
	elseif (hero.tagis[Edge.edgSRRapRch3] <> 0) then
	  myRec = "5 minutes"
	  endif
		  
	append @newline
    append @boldon & "Powers" & @boldoff & @newline
	  
	~ get the Arcane Background name
	foreach pick in hero from Arcane
	  myAB = eachpick.field[name].text
	  nexteach
		  
    append @boldon & "Arcane Background: " & myAB & @boldoff & @newline
	append @boldon & myPPType & @boldoff & myPP
	append @boldon & " - Recovery: " & @boldoff & "1/" & myRec & @newline

	~output Primary AB powers
    foreach pick in hero from Power where "!Rifts.SecondaryPower"
      append @boldon & eachpick.field[name].text & @boldoff & " (Cost: " & eachpick.field[powPoints].text & ") " 
	  myPwrRank = eachpick.tagnames[MinRank.?,";"]
	  append "[" & myPwrRank & "]" & @newline
	  append liston & @newline
      append listitem & @boldon & "Range: " & @boldoff & eachpick.field[powRange].text & @newline
      append listitem & @boldon & "Duration: " & @boldoff & eachpick.field[powLength].text & @newline
      append listitem & @boldon & "Trapping: " & @boldoff & eachpick.field[powTraps].text & @newline
      append listitem & @boldon & "Effect: " & @boldoff & eachpick.field[summary].text & @newline
      append listoff & @newline
      nexteach
			
	~output Secondary AB powers
	if (hero.tagis[Rifts.HasSecondaryAB] <> 0) then
      append @boldon & "Secondary Arcane Powers:" & @boldoff & @newline
    ~  foreach pick in hero from Power where "Rifts.SecondaryPower"
    ~    append chr(149) & eachpick.field[name].text & ": "
    ~    append eachpick.field[summary].text & @newline
    ~    nexteach
	  endif
	
    ]]></procedure>

  <procedure id="sbadvancelist" scripttype="synthesize"><![CDATA[
    var liston as string
	var listitem as string
	var listoff as string
    var tagexpr as string
	
	var totCost as number
	var halfItem as number
    
	var FullAdvances as number
	var AdvanceName as string
	
    append liston & @newline 
	
    foreach pick in hero from Advance sortas AdvanceOut

      ~ append what XP portion the advance is for
      if (FullAdvances = 0) then
	    AdvanceName = "Novice 1: "
	  elseif (FullAdvances = 1) then
	    AdvanceName = "Novice 2: "
	  elseif (FullAdvances = 2) then
	    AdvanceName = "Novice 3: "
	  elseif (FullAdvances = 3) then
	    AdvanceName = "Seasoned 1: "
	  elseif (FullAdvances = 4) then
	    AdvanceName = "Seasoned 2: "
	  elseif (FullAdvances = 5) then
	    AdvanceName = "Seasoned 3: "
	  elseif (FullAdvances = 6) then
	    AdvanceName = "Veteran 1: "
	  elseif (FullAdvances = 7) then
	    AdvanceName = "Veteran 2: "
	  elseif (FullAdvances = 8) then
	    AdvanceName = "Veteran 3: "
	  elseif (FullAdvances = 9) then
	    AdvanceName = "Heroic 1: "
	  elseif (FullAdvances = 10) then
	    AdvanceName = "Heroic 2: "
	  elseif (FullAdvances = 11) then
	    AdvanceName = "Heroic 3: "
	  elseif (FullAdvances = 12) then
	    AdvanceName = "Legendary 1: "
	  elseif (FullAdvances = 13) then
	    AdvanceName = "Legendary 2: "
	  elseif (FullAdvances = 14) then
	    AdvanceName = "Legendary 3: "
	  elseif (FullAdvances = 15) then
	    AdvanceName = "Legendary 4: "
	    endif

	  totCost = eachpick.field[advCost].value
	  
	  if (totCost = 1) then
	    append listitem & AdvanceName
		halfItem = 0
	  else
	    if (halfItem = 1) then
	      append ", "
		else
		  append listitem & AdvanceName
		  endif
		endif
		
      ~ append advance details	  
	  append eachpick.field[advAction].text & " (" & eachpick.field[name].text & ")"
	  
	  if (totCost = 1) then
	    append @newline
		FullAdvances += 1
	  else
	    if (halfItem = 1) then
		  append @newline
		  halfItem = 0
		  FullAdvances += 1
		else
	      halfItem += 1
		  endif
		endif
		
      nexteach
	  append listoff & @newline
    ]]></procedure>
	
  <!-- Define the statblock as a text-based dossier. The "synthesize" script actually
        generates the output.
  -->
  <dossier
    id="riftsstblk"
    name="Character Statblock (Rifts)">
    <dossier_text
      styles="plain+html+bbcode+wikitext+print"
      grouping="statblock">
      <synthesize><![CDATA[
        var txt as string
        var tagexpr as string

        ~start by getting our name
        var name as string
        call sbname

        ~output our name
        append @boldon & "Name: " & @boldoff & name & @newline

        ~output any race or creature type (plus faction and group)
        if (!hero.tagis[Hero.NoRace] + hero.tagis[Hero.Creature] > 0) then
          append @boldon & herofield[acRacePref].text & ": " & @boldoff
          append herofield[acRaceName].text & @newline
          endif

        if (herofield[acFactName].isempty = 0) then
          append @boldon & herofield[acFactTerm].text & ": " & @boldoff
          append herofield[acFactName].text & @newline
          endif

        if (herofield[acGrpName].isempty = 0) then
          append @boldon & herofield[acGrpTerm].text & ": " & @boldoff
          append herofield[acGrpName].text & @newline
          endif

        ~output attributes
        append @boldon & "Attributes: " & @boldoff
        tagexpr = "component.Attribute & !Hide.Attribute"
        call sbtraits

        ~output skills
        append @boldon & "Skills: " & @boldoff
        tagexpr = "component.Skill & !Hide.Skill"
        call sbtraits

        ~output derived traits
        var ismore as number
        ismore = 0
        foreach pick in hero from Derived where "!Hide.Trait" sortas explicit
          if (ismore <> 0) then
            append ", "
            endif
          append @boldon & eachpick.field[name].text & ": " & @boldoff
          append eachpick.field[trtDisplay].text
          ismore = 1
          nexteach
        append @newline

        ~output all Smarts-based languages
        if (hero.tagis[Hero.SmartsLang] <> 0) then
          ismore = 0
          foreach pick in hero from Language sortas Domain
            if (ismore = 0) then
              append @boldon & "Languages: " & @boldoff
            else
              append ", "
              endif
            append eachpick.field[domDomain].text
            ismore = 1
            nexteach
          if (ismore <> 0) then
            append @newline
            endif
          endif

        ~synthesize all gear
        var details as string
        details = ""
        call sbweapons
        call sbSRarmor
        call sbgear
        if (empty(details) = 0) then
          append @boldon & "Gear: " & @boldoff & details & @newline
          endif

        ~output magic items
        call sbmagitems
        if (empty(details) = 0) then
          append @boldon & "Magic Items: " & @boldoff & details & @newline
          endif

        ~output Cybernetics
		if (hero.tagis[Cyberware.?] <> 0) then
		  append @newline
          append @boldon & "Cyberware: " & @boldoff & @newline
          tagexpr = "component.Cyberware"
          call sbcyber
		  endif
		  
        ~output special abilities
        if (hero.haschild[Ability] <> 0) then
          append @boldon & "Special Abilities:" & @boldoff & @newline
          foreach pick in hero from Ability where "!Print.NoPrint" sortas SpecialTab
            if (eachpick.tagis[User.HindMajor] <> 0) then
              append chr(149) & " " & eachpick.field[shortname].text & "(*): "
            else
              append chr(149) & " " & eachpick.field[shortname].text & ": "
              endif
            append eachpick.field[summary].text & @newline
            nexteach
          endif

        ~output arcane powers
        if (hero.haschild[Power] <> 0) then
          append @boldon & "Arcane Powers:" & @boldoff & @newline
          foreach pick in hero from Power where "!Rifts.SecondaryPower"
            append chr(149) & eachpick.field[name].text & ": "
            append eachpick.field[summary].text & @newline
            nexteach
          append @boldon & "Secondary Arcane Powers:" & @boldoff & @newline
          foreach pick in hero from Power where "Rifts.SecondaryPower"
            append chr(149) & eachpick.field[name].text & ": "
            append eachpick.field[summary].text & @newline
            nexteach
          endif

        ~output super powers
        if (hero.haschild[SPCPower] <> 0) then
          append @boldon & "Super Powers:" & @boldoff & @newline
          foreach pick in hero from SPCPower
            append chr(149) & eachpick.field[name].text 
            if (eachpick.field[spcLevel].value > 0) then
              append "(Lvl" & eachpick.field[spcLevel].text & ")"
              endif
            if (eachpick.field[spcNameExt].isempty = 1) then
              append ""
            elseif (eachpick.field[spcNameEx2].isempty = 1) then
              append "[" & eachpick.field[spcNameExt].text & "]"
            else
              append "[" & eachpick.field[spcNameExt].text & "," & eachpick.field[spcNameEx2].text & "]"
              endif
            append chr(149) & eachpick.field[spcModList].text
            append ": "
            append eachpick.field[summary].text & @newline
            nexteach
          endif

        ~output personal details
        if (hero.haschild[Personal] <> 0) then
          foreach pick in hero from Personal
            if (eachpick.field[perInfo].isempty = 0) then
              append @boldon & "Personal Details: " & @boldoff & eachpick.field[perInfo].text & @newline
              endif
            nexteach
          endif

        ~output injuries
        if (hero.haschild[Injury] <> 0) then
          append @boldon & "Injuries:" & @boldoff & @newline
          foreach pick in hero from Injury
            append chr(149) & eachpick.field[name].text & ": "
            append eachpick.field[summary].text & @newline
            nexteach
          endif

        ~output tracked resources
        call sbtrackres

        ~output Fortune and Glory selections
		if (hero.tagis[Rifts.FortuneAndGlory] <> 0) then
		  append @newline
          append @boldon & "Fortune and Glory: " & @boldoff & @newline
          tagexpr = "component.Fortune"
          call sbfortune
		  endif
		
        ~output Hero's Journey selections
		if (hero.tagis[RiftsHJTable.?] <> 0) then
		  append @newline
          append @boldon & "Hero's Journey: " & @boldoff & @newline
          tagexpr = "component.HeroJrny"
          call sbherojrny
		  endif
		
        ~output NPC details if this character is a NPC - if any field for any
        ~of the three blocks of text is set, output that block
        doneif (hero.tagis[Hero.NPC] = 0)
        var tagexpr as string
        var title as string

        ~values of up to 15 are basic details only
        tagexpr = "val:explicit.? <= 15"
        title = "Basic Details"
        call sbnpcinfo

        ~values of up to 30 are tactics
        tagexpr = "val:explicit.? > 15 & val:explicit.? <= 30"
        title = "Tactics"
        call sbnpcinfo

        ~values of up to 45 are ecology
        tagexpr = "val:explicit.? > 30 & val:explicit.? <= 45"
        title = "Ecology"
        call sbnpcinfo

        ~anything else is extra
        tagexpr = "val:explicit.? > 45"
        title = "Additional Details"
        call sbnpcinfo
        ]]></synthesize>
      </dossier_text>
    </dossier>

  <!-- Statblock to generate a forum post layout for the SavageRifts.com website.
  -->
  <dossier
    id="savriftscom"
    name="Character Output (SavageRifts.com)">
    <dossier_text
      styles="bbcode"
      grouping="statblock">
      <synthesize><![CDATA[
        var liston as string
	    var listitem as string
	    var listoff as string
	
	    liston = "[list]"
	    listitem = "[*]"
        listoff = "[/list]"
		
        var txt as string
        var tagexpr as string
		var ismore as number
		
		var size118on as string
		var sizeoff as string
		size118on = "[size=118]"
		sizeoff = "[/size]"
	
        ~start by getting our name
        var name as string
        call sbname

        ~output our name
        append @boldon & size118on & name & sizeoff & @boldoff & @newline
		
		~output Rank, Experience and Advances left
		append @boldon & "Rank: " & @boldoff & herofield[acRankName].text
		append @boldon & "     Experience: " & @boldoff & herofield[acFinalXP].text
		append @boldon & "     Advances Left: " & @boldoff & #resleft[resAdvance] & @newline
		
        ~output any race or creature type (plus faction and group)
        if (!hero.tagis[Hero.NoRace] + hero.tagis[Hero.Creature] > 0) then
          append @boldon & herofield[acRacePref].text & ": " & @boldoff
          append herofield[acRaceName].text & @newline
          endif

        if (herofield[acFactName].isempty = 0) then
          append @boldon & herofield[acFactTerm].text & ": " & @boldoff
          append herofield[acFactName].text & @newline
          endif

        if (herofield[acGrpName].isempty = 0) then
          append @boldon & herofield[acGrpTerm].text & ": " & @boldoff
          append herofield[acGrpName].text & @newline
		  
		  append @boldon & herofield[acGrpTerm].text & "Abilities" & @boldoff & @newline
		  append liston & @newline
		  foreach pick in hero from FraAbility
            append listitem & @boldon & eachpick.field[name].text & @boldoff & @newline
	        append liston & @newline 
	        append listitem & eachpick.field[summary].text & @newline
            append listoff & @newline
            nexteach
          append listoff & @newline
		  
		  append @boldon & herofield[acGrpTerm].text & "Complications" & @boldoff & @newline
		  append liston & @newline
		  foreach pick in hero from FraComp
            append listitem & @boldon & eachpick.field[name].text & @boldoff & @newline
	        append liston & @newline 
	        append listitem & eachpick.field[summary].text & @newline
            append listoff & @newline
            nexteach
          append listoff & @newline
          endif

        ~output attributes
        append @boldon & "Attributes: " & @boldoff
        tagexpr = "component.Attribute & !Hide.Attribute"
        call sbtraits

        ~output derived traits
		append @boldon & "Charisma: " & @boldoff & hero.child[trCharisma].field[trtDisplay].text & "; " 
		
		append @boldon & "Pace: " & @boldoff & hero.child[trPace].field[trtDisplay].text & " ("
		append hero.child[trRunning].field[trtDisplay].text & "); " 
		
		append @boldon & "Parry: " & @boldoff & hero.child[trParry].field[trtDisplay].text & "; "
		
		append @boldon & "Toughness: " & @boldoff & hero.child[trTough].field[trtDisplay].text & "; "
		
		append @boldon & "Strain: " & @boldoff & hero.child[trSRCybStrain].field[trtDisplay].text & " (Max: " & hero.child[trSRCybStrainMax].field[trtDisplay].text & ")" & @newline
		 
        append @newline

        ~output skills
        append @boldon & "Skills: " & @boldoff & @newline
        call sblistskills
		
        ~output all Smarts-based languages
        if (hero.tagis[Hero.SmartsLang] <> 0) then
          ismore = 0
          foreach pick in hero from Language sortas Domain
            if (ismore = 0) then
              append @boldon & "Languages: " & @boldoff
            else
              append ", "
              endif
            append eachpick.field[domDomain].text
            ismore = 1
            nexteach
          if (ismore <> 0) then
            append @newline
            endif
          endif
		  
        ~output hindrances
        append @newline & @boldon & "Hindrances: " & @boldoff & @newline
		tagexpr = "component.Hindrance & !Print.NoPrint"
        call sblisttraits	
		
        ~output edges
        append @newline & @boldon & "Edges: " & @boldoff & @newline
		tagexpr = "component.Edge & !Hide.Edge & !Print.NoPrint"
        call sblisttraits

        ~output Cybernetics
		if (hero.haschild[Cyberware] <> 0) then
		  append @newline
          append @boldon & "Cyberware: " & @boldoff & @newline
          tagexpr = "component.Cyberware"
          call sblistcyber
		  endif

        ~output arcane powers
        if (hero.haschild[Power] <> 0) then
          append @newline
		  call sblistarcane
          endif
		  
        ~output Fortune and Glory selections
		if (hero.tagis[Rifts.FortuneAndGlory] <> 0) then
		  append @newline
          append @boldon & "Fortune and Glory: " & @boldoff & @newline
          tagexpr = "component.Fortune"
          call sbfortunelist
		  endif
		
        ~output Hero's Journey selections
		if (hero.tagis[RiftsHJTable.?] <> 0) then
		  append @newline
          append @boldon & "Hero's Journey: " & @boldoff & @newline
          tagexpr = "component.HeroJrny"
          call sbherojrnylist
		  endif

        ~output Advances
		append @newline
        append @boldon & "Advances: " & @boldoff & @newline
        call sbadvancelist
		
        ]]></synthesize>
      </dossier_text>
    </dossier>

  </document>
