<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of the "Abilities" tab panel. This tab is where
      the user selects the special abilities for the character.

      All public visual elements used with this tab panel start with the prefix "ab"
      to associate them with the tab.
-->

<document signature="Hero Lab Data">
  <fileinfo>
    <info_author>Coordinator: TCArknight (Thomas Clegg)
Contributors: Salcor, Father Morpheus</info_author>
    <info_history><![CDATA[
	07/14/19
	Hide tab if Creature since creature aboilities show on the Abilities tab
	
	06/14/19
	Added Property chooser
	]]></info_history>
    <info_todo>Future enhancements:
	XXX</info_todo>
    </fileinfo>
  <portal
    id="raRaceAbil"
    style="tblInvis">
    <table_fixed
      component="RaceAbil"
      showtemplate="SimpleItem"
      showsortset="explicit"
      scrollable="no">
      <headertitle><![CDATA[
        @text = "Racial Abilities"
        ]]></headertitle>
      </table_fixed>
    </portal>

  <portal
    id="raRaceProp"
    style="tblInvis">
    <table_fixed
      component="RacialProp"
      showtemplate="raPropPick"
      showsortset="explicit"
      scrollable="no">
      <list>!Hide.Ability</list>
      <headertitle><![CDATA[
        @text = "Racial Properties"
        ]]></headertitle>
      </table_fixed>
    </portal>

  <!-- raChsEdge1 portal - Allows selection of Racial abilities. -->
  <portal
    id="raChsEdge1"
    style="tblNormal">
    <table_dynamic
      component="none"
      showtemplate="raEdgePick1"
      choosetemplate="SimpleItem"
	  candidatepick="RacialHelper1"
	  candidatefield="rhEdgeExp"
	  headertemplate="raEdgePick1"
	  addpick="resRaceEdge1">
      <list>RacialTab.EdgeSelected1</list>
      <autotag group="RacialTab" tag="EdgeSelected1"/>
      <autotag group="Helper" tag="FreeEdge"/>
      <description/>
      <additem><![CDATA[      
        @text &= hero.child[RacialHelper1].field[rhEdgeAdd].text
        ]]></additem>
      </table_dynamic>
    </portal>
	
  <!-- raChsEdge2 portal - Allows selection of Racial abilities. -->
  <portal
    id="raChsEdge2"
    style="tblNormal">
    <table_dynamic
      component="none"
      showtemplate="raEdgePick1"
      choosetemplate="SimpleItem"
	  candidatepick="RacialHelper1"
	  candidatefield="rhEdgeExp2"
	  headertemplate="raEdgePick1"
	  addpick="resRaceEdge1">
      <list>RacialTab.EdgeSelected2</list>
      <autotag group="RacialTab" tag="EdgeSelected2"/>
      <autotag group="Helper" tag="FreeEdge"/>
      <description/>
      <additem><![CDATA[      
        @text &= hero.child[RacialHelper1].field[rhEdgeAdd2].text
        ]]></additem>
      </table_dynamic>
    </portal>
	
  <!-- raChsSkill1 portal - Allows selection of Racial abilities. -->
  <portal
    id="raChsSkill1"
    style="tblNormal">
    <table_dynamic
      component="none"
      showtemplate="raSkillPick1"
      choosetemplate="SimpleItem"
	  candidatepick="RacialHelper1"
	  candidatefield="rhSkillExp"
	  headertemplate="raSkillPick1"
	  addpick="resRaceSkill1">
      <list>RacialTab.SkillSelected1</list>
      <autotag group="RacialTab" tag="SkillSelected1"/>
      <description/>
      <additem><![CDATA[      
        @text &= hero.child[RacialHelper1].field[rhSkillAdd].text
        ]]></additem>
      </table_dynamic>
    </portal>	
	
  <!-- raChsSkill2 portal - Allows selection of Racial abilities. -->
  <portal
    id="raChsSkill2"
    style="tblNormal">
    <table_dynamic
      component="none"
      showtemplate="raSkillPick2"
      choosetemplate="SimpleItem"
	  candidatepick="RacialHelper1"
	  candidatefield="rhSkillExp"
	  headertemplate="raSkillPick2"
	  addpick="resRaceSkill1">
      <list>RacialTab.SkillSelected2</list>
      <autotag group="RacialTab" tag="SkillSelected2"/>
      <description/>
      <additem><![CDATA[      
        @text &= hero.child[RacialHelper1].field[rhSkillAdd2].text
        ]]></additem>
      </table_dynamic>
    </portal>	
	
  <!-- raChsSimple1 portal - Allows selection of Racial abilities. -->
  <portal
    id="raChsSimple1"
    style="tblNormal">
    <table_dynamic
      component="none"
      showtemplate="raSimplePick1"
      choosetemplate="SimpleItem"
	  candidatepick="RacialHelper1"
	  candidatefield="rhSimpleExp"
	  headertemplate="raSimplePick1"
	  addpick="resRaceSimple1">
      <list>RacialTab.SimpleSelected1</list>
      <autotag group="RacialTab" tag="SimpleSelected1"/>
      <description/>
      <additem><![CDATA[      
        @text &= hero.child[RacialHelper1].field[rhSimpleAdd].text
        ]]></additem>
      </table_dynamic>
    </portal>	
	
  <!-- raChsSimple1 portal - Allows selection of Racial abilities. -->
  <portal
    id="raChsRacialProp1"
    style="tblNormal">
    <table_dynamic
      component="RacialProp"
      showtemplate="raPropPick"
      choosetemplate="SimpleItem"
	  candidatepick="RacialHelper1"
	  candidatefield="rhRPropExp"
	  addpick="resRacialPropAdd">
      <list>RacialTab.RPropSelected</list>
      <autotag group="RacialTab" tag="RPropSelected"/>
      <description/>
	  <headertitle><![CDATA[
        @text = hero.child[RacialHelper1].field[rhRPropHdr].text
        ]]></headertitle>
      <additem><![CDATA[      
        @text &= hero.child[RacialHelper1].field[rhRPropAdd].text
        ]]></additem>
      </table_dynamic>
    </portal>
	
  <template
    id="raEdgePick1"
    name="Chooser Pick"
    compset="Edge"
    marginhorz="3"
    marginvert="2">

	<portal
      id="hdrText"
      style="lblTitle"
	  isheader="yes">
      <label>
      	<labeltext><![CDATA[
  	       @text = hero.child[RacialHelper1].field[rhEdgeHdr].text
      	   ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="lblmenu1"
      style="lblSecond">
      <label
        field="usrLabel1">
        </label>
      </portal>

    <portal
      id="menu1"
      style="menuNormal">
      <menu_things
        field="usrChosen1"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource1"
        candidatefield="usrCandid1">
        </menu_things>
      </portal>
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
	  height = portal[info].height

      ~if we've been assigned a non-default width for use when showing things, adopt
      ~that width now
      if (ispick = 0) then
        var size as number
        size = tagvalue[SimpleItem.width?]
        if (size > 0) then
          width = size
          endif
        endif

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert

      ~determine whether our portals are visible; we only show them if requested
      ~Note: Remember that a non-empty tagexpr field indicates menu selection is used.
      if (field[usrCandid1].isempty <> 0) then
        portal[menu1].visible = 0
		endif
      if (field[usrLabel1].isempty <> 0) then
        portal[lblmenu1].visible = 0
		endif
		
       ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~determine our effective right edge, allowing for the buttons above
      var edge as number
      edge = portal[info].left - 10

      ~setup the default portal width and gap to be used between and around portals
      var defwidth as number
      var gap as number
      defwidth = 150
      gap = 10

      ~determine the minimum amount of space we need to reserve for our portals
      var reserve as number
      ~if (portal[checkbox].visible <> 0) then
      ~  reserve = defwidth
      ~elseif (portal[menuarray].visible <> 0) then
      ~  reserve = portal[lblmenuar].width * portal[lblmenuar].visible
      ~  reserve += defwidth + gap
      ~else
	  if (portal[menu1].visible <> 0) then
	    portal[menu1].width = 100
        reserve = portal[lblmenu1].width * portal[lblmenu1].visible
        reserve += defwidth + gap
        ~reserve += portal[lblmenu2].width * portal[menu2].visible
        ~reserve += (defwidth + gap) * portal[menu2].visible
        endif
		
      ~if we're showing a thing, the info and delete buttons are irrelevant, since
      ~we should be showing within a chooser, in which case there's nothing to
      ~delete and we have the description already visible
      var edge as number
      if (ispick = 0) then
        portal[info].visible = 0
        portal[delete].visible = 0
        edge = width
      else
        edge = portal[info].left - 5
        endif

      ~position the name on the left, reserving our minimum space for any portals
      var x as number
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,edge - portal[name].left - reserve)
      x = portal[name].right + gap

      ~setup the maximum width for our some portals, regardless of space available
      var maxwidth as number
      maxwidth = 150

      if (portal[menu1].visible <> 0) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
		endif
	  
      ~if a menu is visible, make sure it has a selection
      if (portal[menu1].visible <> 0) then
        if (field[usrChosen1].ischosen = 0) then
          perform portal[menu1].setstyle[menuError]
          endif
        endif
		
      ~center the name if requested or this is a show-only thing
      if (tagis[SimpleItem.CenterName] + tagis[thing.showonly] <> 0) then
        perform portal[name].centerhorz
        endif

      ~if this is an auto-added pick, change its font to indicate that fact
      if (ispick + !candelete >= 2) then
        perform portal[name].setstyle[lblAuto]
        endif
	  
      ]]></position>
	  <header><![CDATA[
		~our header height is the height of our labels
		height = portal[name].height

		~each of our header labels has the same width as the corresponding data beneath
		portal[hdrText].width = width

		~align all header labels at the bottom of the header region
		perform portal[hdrText].alignedge[bottom,0]

		]]></header>
		</template>
		
  <template
    id="raSkillPick1"
    name="Skill Pick 1"
    compset="Skill"
    marginhorz="3"
    marginvert="2">

	<portal
      id="hdrText"
      style="lblTitle"
	  isheader="yes">
      <label>
      	<labeltext><![CDATA[
  	       @text = hero.child[RacialHelper1].field[rhSkillHdr].text
      	   ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if we've been assigned a non-default width for use when showing things, adopt
      ~that width now
      if (ispick = 0) then
        var size as number
        size = tagvalue[SimpleItem.width?]
        if (size > 0) then
          width = size
          endif
        endif

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~if we're showing a thing, the info and delete buttons are irrelevant, since
      ~we should be showing within a chooser, in which case there's nothing to
      ~delete and we have the description already visible
      var edge as number
      if (ispick = 0) then
        portal[info].visible = 0
        portal[delete].visible = 0
        edge = width
      else
        edge = portal[info].left - 5
        endif

      ~position the name on the left and let it use all available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,edge)

      ~center the name if requested or this is a show-only thing
      if (tagis[SimpleItem.CenterName] + tagis[thing.showonly] <> 0) then
        perform portal[name].centerhorz
        endif

      ~if this is an auto-added pick, change its font to indicate that fact
      if (ispick + !candelete >= 2) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>
	  <header><![CDATA[
		~our header height is the height of our labels
		height = portal[name].height

		~each of our header labels has the same width as the corresponding data beneath
		portal[hdrText].width = width

		~align all header labels at the bottom of the header region
		perform portal[hdrText].alignedge[bottom,0]

		]]></header>
		</template>
		
  <template
    id="raSkillPick2"
    name="Skill Pick 2"
    compset="Skill"
    marginhorz="3"
    marginvert="2">

	<portal
      id="hdrText"
      style="lblTitle"
	  isheader="yes">
      <label>
      	<labeltext><![CDATA[
  	       @text = hero.child[RacialHelper1].field[rhSkillHdr2].text
      	   ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if we've been assigned a non-default width for use when showing things, adopt
      ~that width now
      if (ispick = 0) then
        var size as number
        size = tagvalue[SimpleItem.width?]
        if (size > 0) then
          width = size
          endif
        endif

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~if we're showing a thing, the info and delete buttons are irrelevant, since
      ~we should be showing within a chooser, in which case there's nothing to
      ~delete and we have the description already visible
      var edge as number
      if (ispick = 0) then
        portal[info].visible = 0
        portal[delete].visible = 0
        edge = width
      else
        edge = portal[info].left - 5
        endif

      ~position the name on the left and let it use all available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,edge)

      ~center the name if requested or this is a show-only thing
      if (tagis[SimpleItem.CenterName] + tagis[thing.showonly] <> 0) then
        perform portal[name].centerhorz
        endif

      ~if this is an auto-added pick, change its font to indicate that fact
      if (ispick + !candelete >= 2) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>
	  <header><![CDATA[
		~our header height is the height of our labels
		height = portal[name].height

		~each of our header labels has the same width as the corresponding data beneath
		portal[hdrText].width = width

		~align all header labels at the bottom of the header region
		perform portal[hdrText].alignedge[bottom,0]

		]]></header>
		</template>

  <template
    id="raSimplePick1"
    name="Simple Pick 1"
    compset="Simple"
    marginhorz="3"
    marginvert="2">

	<portal
      id="hdrText"
      style="lblTitle"
	  isheader="yes">
      <label>
      	<labeltext><![CDATA[
  	       @text = hero.child[RacialHelper1].field[rhSimpleHdr].text
      	   ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if we've been assigned a non-default width for use when showing things, adopt
      ~that width now
      if (ispick = 0) then
        var size as number
        size = tagvalue[SimpleItem.width?]
        if (size > 0) then
          width = size
          endif
        endif

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~if we're showing a thing, the info and delete buttons are irrelevant, since
      ~we should be showing within a chooser, in which case there's nothing to
      ~delete and we have the description already visible
      var edge as number
      if (ispick = 0) then
        portal[info].visible = 0
        portal[delete].visible = 0
        edge = width
      else
        edge = portal[info].left - 5
        endif

      ~position the name on the left and let it use all available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,edge)

      ~center the name if requested or this is a show-only thing
      if (tagis[SimpleItem.CenterName] + tagis[thing.showonly] <> 0) then
        perform portal[name].centerhorz
        endif

      ~if this is an auto-added pick, change its font to indicate that fact
      if (ispick + !candelete >= 2) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>
	  <header><![CDATA[
		~our header height is the height of our labels
		height = portal[name].height

		~each of our header labels has the same width as the corresponding data beneath
		portal[hdrText].width = width

		~align all header labels at the bottom of the header region
		perform portal[hdrText].alignedge[bottom,0]

		]]></header>
		</template>
		
  <template
    id="raPropPick"
    name="Racial Property Pick"
    compset="RacialProp"
    marginhorz="3"
    marginvert="2">
    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="lblmenu1"
      style="lblSecond">
      <label
        field="usrLabel1">
        </label>
      </portal>

    <portal
      id="lblmenu2"
      style="lblSecond">
      <label
        field="usrLabel2">
        </label>
      </portal>

    <portal
      id="menu1"
      style="menuNormal">
      <menu_things
        field="usrChosen1"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource1"
        candidatefield="usrCandid1">
        </menu_things>
      </portal>

    <portal
      id="menu2"
      style="menuNormal">
      <menu_things
        field="usrChosen2"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource2"
        candidatefield="usrCandid2">
        </menu_things>
      </portal>

    <portal
      id="lblmenuar"
      style="lblSecond">
      <label
        field="usrLabelAr">
        </label>
      </portal>

    <portal
      id="menuarray"
      style="menuNormal">
      <menu_array
        field="usrSelect"
        array="usrArray"
        maxvisible="10">
        </menu_array>
      </portal>

    <portal
      id="checkbox"
      style="chkNormal">
      <checkbox
        field="usrIsCheck"
        dynamicfield="usrChkText">
        </checkbox>
      </portal>

    <portal
      id="summary"
      style="lblSmlLeft"
      showinvalid="yes">
      <label
        field="summary">
        </label>
      </portal>
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[summary].height + portal[name].bottom + 5

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[name].top = 0

      ~center the other portals vertically
      perform portal[info].centervert
      perform portal[delete].centervert
      ~perform portal[lblmenu1].centervert
      ~perform portal[menu1].centervert
      ~perform portal[lblmenu2].centervert
      ~perform portal[menu2].centervert
      ~perform portal[lblmenuar].centervert
      ~perform portal[menuarray].centervert
      ~perform portal[checkbox].centervert
	  
      ~determine whether our portals are visible; we only show them if requested
      ~Note: Remember that a non-empty tagexpr field indicates menu selection is used.
      if (field[usrCandid1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        portal[menu1].visible = 0
      elseif (field[usrLabel1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        endif
		
      if (field[usrCandid2].isempty <> 0) then
        portal[lblmenu2].visible = 0
        portal[menu2].visible = 0
      elseif (field[usrLabel2].isempty <> 0) then
        portal[lblmenu2].visible = 0
        endif
		
      if (empty(field[usrArray].arraytext[0]) <> 0) then
        portal[lblmenuar].visible = 0
        portal[menuarray].visible = 0
      elseif (field[usrLabelAr].isempty <> 0) then
        portal[lblmenuar].visible = 0
        endif
		
      if (field[usrChkText].isempty <> 0) then
        portal[checkbox].visible = 0
        endif
	  
      ~position the delete portal on the far right and the info portal next to it
      perform portal[delete].alignedge[right,0]
      perform portal[info].alignrel[rtol,delete,-8]

      ~determine our effective right edge, allowing for the buttons above
      var edge as number
      edge = portal[info].left - 10

      ~setup the default portal width and gap to be used between and around portals
      var defwidth as number
      var gap as number
      defwidth = 100
      gap = 10

      ~determine the minimum amount of space we need to reserve for our portals
      var reserve as number
      if (portal[checkbox].visible <> 0) then
        reserve = defwidth
      elseif (portal[menuarray].visible <> 0) then
        reserve = portal[lblmenuar].width * portal[lblmenuar].visible
        reserve += defwidth + gap
      elseif (portal[menu1].visible <> 0) then
        reserve = portal[lblmenu1].width * portal[lblmenu1].visible
        reserve += defwidth + gap
        reserve += portal[lblmenu2].width * portal[menu2].visible
        reserve += (defwidth + gap) * portal[menu2].visible
        endif

      ~position the name on the left, reserving our minimum space for any portals
      var x as number
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,edge - portal[name].left - reserve)
      x = portal[name].right + gap

      ~setup the maximum width for our some portals, regardless of space available
      var maxwidth as number
      maxwidth = 150

      ~if we have a checkbox, size and position it appropriately
      if (portal[checkbox].visible <> 0) then
        portal[checkbox].left = x

      ~if we have an array-based menu, size and position it appropriately
      elseif (portal[menuarray].visible <> 0) then
        if (portal[lblmenuar].visible <> 0) then
          portal[lblmenuar].left = x
          x = portal[lblmenuar].right + 4
          endif
        portal[menuarray].left = x
        portal[menuarray].width = maxwidth

      ~if we have one thing-based menu, size and position it appropriately
      elseif (portal[menu1].visible + portal[menu2].visible = 1) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        portal[menu1].width = minimum(edge - portal[menu1].left,maxwidth)

      ~if we have two thing-based menus, size and position them appropriately
      elseif (portal[menu1].visible <> 0) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        var extra as number
        extra = (portal[lblmenu2].width + 4) * portal[lblmenu2].visible
        var actual as number
        actual = (edge - portal[menu1].left - extra - gap) / 2
        portal[menu1].width = minimum(actual,maxwidth)
        portal[menu2].width = portal[menu1].width
        x = portal[menu1].right + gap
        if (portal[lblmenu2].visible <> 0) then
          portal[lblmenu2].left = x
          x = portal[lblmenu2].right + 4
          endif
        portal[menu2].left = x
        endif

      ~if a menu is visible, make sure it has a selection
      if (portal[menu1].visible <> 0) then
        if (field[usrChosen1].ischosen = 0) then
          perform portal[menu1].setstyle[menuError]
          endif
        endif
      if (portal[menu2].visible <> 0) then
        if (field[usrChosen2].ischosen = 0) then
          perform portal[menu2].setstyle[menuError]
          endif
        endif
      if (portal[menuarray].visible <> 0) then
        if (field[usrSelect].isempty <> 0) then
          perform portal[menuarray].setstyle[menuError]
          endif
        endif
		
	  ~position the summary beneath let it use all available space
      portal[summary].top = portal[name].bottom + 5
	  portal[summary].left = portal[name].left + 15
      portal[summary].width = minimum(portal[summary].width,edge)
	  
      ]]></position>

    </template>

            
  <!-- racial layout
  -->
  <layout
    id="racial">
    <portalref portal="raRaceAbil" />
    <portalref portal="raRaceProp" />
    <portalref portal="raChsEdge1" />
    <portalref portal="raChsEdge2" />
    <portalref portal="raChsSkill1" />
    <portalref portal="raChsSkill2" />
    <portalref portal="raChsSimple1" />
    <portalref portal="raChsRacialProp1" />
	

    <!-- This script sizes and positions the layout and its child visual elements. -->
    <position><![CDATA[
      ~freeze our table in advancement mode to disable adding new choices
      ~Note: All freezing must be done *before* any positioning is performed.
      if (state.iscreate = 0) then
        portal[raRaceAbil].freeze = 1
        endif

      portal[raRaceAbil].visible = 1
      portal[raRaceProp].visible = 1
	  portal[raChsEdge1].visible = 0
	  portal[raChsEdge2].visible = 0
	  portal[raChsSkill1].visible = 0
	  portal[raChsSkill2].visible = 0
	  portal[raChsSimple1].visible = 0
	  portal[raChsRacialProp1].visible = 0
	  
	  if (hero.child[RacialHelper1].field[rhEdgeExp].isempty = 0) then
	    portal[raChsEdge1].visible = 1
		endif
	  if (hero.child[RacialHelper1].field[rhEdgeExp2].isempty = 0) then
	    portal[raChsEdge2].visible = 1
		endif
	  if (hero.child[RacialHelper1].field[rhSkillExp].isempty = 0) then
	    portal[raChsSkill1].visible = 1
		endif
	  if (hero.child[RacialHelper1].field[rhSkillExp2].isempty = 0) then
	    portal[raChsSkill2].visible = 1
		endif
	  if (hero.child[RacialHelper1].field[rhSimpleExp].isempty = 0) then
	    portal[raChsSimple1].visible = 1
		endif
	  if (hero.child[RacialHelper1].field[rhRPropExp].isempty = 0) then
	    portal[raChsRacialProp1].visible = 1
		endif
		
      ~position and size the table to span the full layout; it will only use the
      ~vertical space that it actually needs
      perform portal[raRaceAbil].autoplace
      perform portal[raRaceProp].autoplace[10]
      perform portal[raChsEdge1].autoplace[10]
      perform portal[raChsEdge2].autoplace[10]
      perform portal[raChsSkill1].autoplace[10]
      perform portal[raChsSkill2].autoplace[10]
      perform portal[raChsSimple1].autoplace[10]
      perform portal[raChsRacialProp1].autoplace[10]
	  
      ]]></position>

    </layout>

  <!-- racial panel  -->
  <panel
    id="racial"
    name="Racial"
    marginhorz="5"
    marginvert="5"
    order="115">
    <live>!(RacialTab.HideRacialTab|Hero.Creature)</live>
    <layoutref layout="racial"/>
    <position><![CDATA[
      ]]></position>
    </panel>
  </document>
